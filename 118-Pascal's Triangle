/*Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
*/
/*public class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(numRows == 0){
            return res;
        }
        List<Integer> tmp = new ArrayList<Integer>();
        //List<Integer> list = null;
        //tmp.add(1);
        //res.add(tmp);
        
        for (int i = 0; i<numRows; i++){
            list = new ArrayList<Integer>();
            list.add(1);
            List<Integer> ref = res.get(res.size()-1);
            for(int j =0; j<ref.size()-1;i++){
                list.add(ref.get(j)+ref.get(j+1));
            }
            list.add(1);
            res.add(list);
        }
        
        return res;
    }
}*/
public class Solution {
	public List<List<Integer>> generate(int numRows) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		List<Integer> row, pre = null;
		for (int i = 0; i < numRows; ++i) {
			row = new ArrayList<Integer>();
			for (int j = 0; j <= i; ++j)
				if (j == 0 || j == i)
					row.add(1);
				else
					row.add(pre.get(j - 1) + pre.get(j));
			pre = row;
			res.add(row);
		}
		return res;
	}
}
